{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% extends "paragraph.html.twig" %}

{% set content_classes = [
  'flex',
  'flex-wrap',
  'justify-start',
  '-mx-5',
  '-mb-8',
  'last:-mb-8',
  'p-0',
  'list-none',
  'children:px-5',
  'children:pb-8',
] %}

{% if paragraph.field_grid_columns.0.value == '1' %}
  {% set column_classes = ['px-5', 'pb-8', 'w-full'] %}
{% elseif paragraph.field_grid_columns.0.value == '2' %}
  {% set column_classes = ['px-5', 'pb-8', 'w-full', 'sm:w-6/12'] %}
{% elseif paragraph.field_grid_columns.0.value == '3' %}
  {% set column_classes = ['px-5', 'pb-8', 'w-full', 'sm:w-6/12', 'md:w-4/12'] %}
{% elseif paragraph.field_grid_columns.0.value == '4' %}
  {% set column_classes = ['px-5', 'pb-8', 'w-full', 'sm:w-6/12', 'md:w-4/12', 'lg:w-3/12'] %}
{% endif %}

{% block content %}
  <nav>
    <ul{{ create_attribute({'class': content_classes}) }}>
      {% for key, item in content.field_buttons if key|first != '#' %}
        {% set link_classes = [
          'btn',
          'btn--primary',
          'w-full',
          item['#url'].isExternal ? 'is-external',
        ] %}

        <li{{ create_attribute({'class': column_classes}) }}>
          <a href="{{ item['#url'] }}" {{ create_attribute({'class': link_classes}) }}{% if item['#url'].isExternal %} target="_blank"{% endif %}>{{ item['#title'] }}</a>
        </li>
      {% endfor %}
    </ul>
  </nav>
{% endblock %}
